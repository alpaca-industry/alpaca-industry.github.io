<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on elegwance</title><link>https://blog.elegwance.com/posts/</link><description>Recent content in Posts on elegwance</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Tue, 12 Jul 2022 05:48:07 +0900</lastBuildDate><atom:link href="https://blog.elegwance.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>[WWDC22] What’s new in WKWebView</title><link>https://blog.elegwance.com/posts/wwdc22-whats-new-in-wkwebview/</link><pubDate>Tue, 12 Jul 2022 05:48:07 +0900</pubDate><guid>https://blog.elegwance.com/posts/wwdc22-whats-new-in-wkwebview/</guid><description>타 사이트를 웹뷰에서 보여줄 때 Content Blocking 기능을 통해 보여주고 싶지 않은 부분을 가릴 수 있는 정도만 써볼만 할 듯.
요즘은 웹뷰와 디바이스 성능이 점점 좋아지고 있고, 지원되는 기능들도 많아져서 몇 가지 테크닉만 이용하면 네이티브처럼 보이게 구현할 수 있다. 굳이 많은 공수를 들여 화면을 네이티브로 만들 필요가 있나라는 생각이 들 때가 많다.
개발자의 눈으로 봤을 때 리엑트나 웹뷰로 구성했을 때 여전히 티가 나는 부분들이 많지만, 일반 유저들은 쉽게 구분을 하지 못한다.</description></item><item><title>Swift 5.7 if let shorthand</title><link>https://blog.elegwance.com/posts/swift-5.7-if-let-shorthand/</link><pubDate>Tue, 05 Jul 2022 03:41:40 +0900</pubDate><guid>https://blog.elegwance.com/posts/swift-5.7-if-let-shorthand/</guid><description>let someLengthyVariableName: Foo? = … let anotherImportantVariable: Bar? = … if let someLengthyVariableName = someLengthyVariableName, let anotherImportantVariable = anotherImportantVariable { … } // or if let a = someLengthyVariableName, let b = anotherImportantVariable { ... } optional 변수를 unwrap을 하다 보면 이런 식으로 사용하는 경우가 많다. 단순히 해당 변수가 값을 가지고 있는지 확인하고 싶을 뿐이지만 변수명도 중복 되고, 코드도 깔끔해 보이지 않는다.
(kotlin도 사실 크게 다를 건 없지만 적어도 let과 같은 함수를 쓰면 변수명을 중복으로 쓰지 않아도 된다.</description></item><item><title>[WWDC22] Swift Regex: Beyond the basics</title><link>https://blog.elegwance.com/posts/wwdc22-swift-regex-beyond-the-basics/</link><pubDate>Tue, 28 Jun 2022 02:03:39 +0900</pubDate><guid>https://blog.elegwance.com/posts/wwdc22-swift-regex-beyond-the-basics/</guid><description>아직 WWDC22를 몇개 보진 못했지만, 지금까지 제일 마음에 들었던 세션.
Javascript 처럼 슬래시 만으로 정규 표현식을 사용할 수 있다. Builder 형식으로도 사용 가능하다. 복잡한 표현식 같은 경우에는 코드는 길어지지만 가독성은 훨씬 좋아진다. 그리고 통화 표시나 날짜처럼 기존의 정규표현식에서는 처리하기 까다로웠던 부분들을 쉽게 처리할 수 있게 구현 되어있다.
기존의 방식보다 훨씬 깔끔해짐
정규 표현식 함수들. switch에서도 사용할 수 있는 부분이 꽤나 신박
추가로 지원되는 형식들
Builder 형식이 압도적으로 가독성이 좋다. 기존 형식이였다면 코드는 짧아졌겠지만 작성자가 아닌 사람이 봤을 때 눈에 들어오지 않음.</description></item></channel></rss>